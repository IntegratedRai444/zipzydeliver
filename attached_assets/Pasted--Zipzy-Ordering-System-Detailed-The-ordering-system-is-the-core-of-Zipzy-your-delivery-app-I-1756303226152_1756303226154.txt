ðŸ“¦ Zipzy Ordering System (Detailed)

The ordering system is the core of Zipzy (your delivery app). It handles placing orders, tracking them, processing payments, and notifying users.

ðŸ”¹ 1. User Journey (Step by Step)

Browse & Select

User logs in â†’ browses items/services (canteen food, parcels, books, etc.).

Adds items to cart.

Place Order

User confirms order â†’ provides delivery details (name, room/hostel, contact).

Order saved in database (orders table).

Status = PENDING.

Assign Delivery

Zipzy system (or admin) assigns a delivery person.

Delivery person sees the order on their dashboard.

Status updates to ASSIGNED.

Payment

User pays via:

UPI QR Scan (zipzyâ€™s own QR payment system you planned)

Or COD (Cash on Delivery).

Payment logged in payments table.

Delivery Updates

Delivery person updates order:

OUT_FOR_DELIVERY

DELIVERED

User gets real-time notification.

Completion

Final status = DELIVERED.

User can rate/review delivery.

ðŸ”¹ 2. Database Schema (Core Tables)
users

id (PK)

name

email

college_id

student_id

password_hash

face_scan (optional biometric login)

orders

id (PK)

user_id (FK â†’ users)

items (JSON of ordered items)

delivery_address

status (PENDING, ASSIGNED, OUT_FOR_DELIVERY, DELIVERED, CANCELLED)

created_at

updated_at

delivery_persons

id (PK)

name

phone

assigned_order_id (nullable, FK â†’ orders)

payments

id (PK)

order_id (FK â†’ orders)

payment_method (UPI, COD)

payment_status (PENDING, PAID, FAILED)

transaction_id

notifications

id (PK)

user_id (FK â†’ users)

message

timestamp

ðŸ”¹ 3. Tech Flow

Frontend (React/Next.js + Tailwind) â†’ user places orders.

Backend (Node.js/Express or Python/FastAPI) â†’ handles API requests.

Database (Postgres on Neon) â†’ stores orders, payments, delivery info.

Realtime Updates (Supabase Realtime / WebSockets) â†’ for live tracking.

Payment Gateway â†’ UPI QR or test gateway.

ðŸ”¹ 4. Example API Endpoints

POST /order â†’ create order

GET /orders/:id â†’ get order details

PUT /orders/:id/status â†’ update status

POST /payment â†’ process payment

GET /delivery/:id â†’ get delivery person assigned

ðŸ”¹ 5. Example Order Lifecycle

User places order â†’

{
  "user_id": 1,
  "items": [{"name": "Burger", "qty": 2}],
  "delivery_address": "Hostel A, Room 203"
}


â†’ Status = PENDING

Admin assigns delivery â†’
Status = ASSIGNED

Delivery person picks â†’
Status = OUT_FOR_DELIVERY

Delivered â†’
Status = DELIVERED
Payment marked as PAID

âœ… Thatâ€™s the Zipzy ordering system â€” user flow, database, backend, and lifecycle.